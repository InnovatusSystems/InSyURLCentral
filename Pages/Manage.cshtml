@page
@model ManageModel
@{
    ViewData["Title"] = "Manage Control Panel Links";
}

<div class="container py-4">
    <h2>Manage Control Panel Links</h2>
    <div class="mb-3">
        <button class="btn btn-success" onclick="showAddRow()">Add New Link</button>
        <a class="btn btn-secondary ms-2" href="./Icons" target="_blank">Browse Icons</a>
    </div>
    <div class="table-responsive">
        <table class="table table-bordered align-middle" id="linksTable">
            <thead class="table-light">
                <tr>
                    <th>Folder Name</th>
                    <th>Folder Icon</th>
                    <th>Link Title</th>
                    <th>Link URL</th>
                    <th>Link Icon</th>
                    <th>Status URL</th>
                    <th>Match Phrase</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Rows will be loaded here -->
            </tbody>
        </table>
    </div>
</div>

<div id="toast" class="toast align-items-center text-bg-primary border-0 position-fixed bottom-0 end-0 m-4" role="alert"
    aria-live="assertive" aria-atomic="true" style="z-index: 9999; display:none; min-width: 200px;">
    <div class="d-flex">
        <div class="toast-body" id="toastBody">
            <!-- Toast message here -->
        </div>
    </div>
</div>
<div id="spinnerOverlay"
    style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(255,255,255,0.5); z-index:9998; align-items:center; justify-content:center;">
    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@section Scripts {
    <script>
        function showToast(message) {
            const toast = document.getElementById('toast');
            const toastBody = document.getElementById('toastBody');
            toastBody.textContent = message;
            toast.style.display = 'block';
            setTimeout(() => { toast.style.display = 'none'; }, 2500);
        }
        function showSpinner(show) {
            document.getElementById('spinnerOverlay').style.display = show ? 'flex' : 'none';
        }
        function fetchLinks() {
            showSpinner(true);
            fetch('./api/ControlPanelLinks/all')
                .then(res => res.json())
                .then(data => renderTable(data))
                .finally(() => showSpinner(false));
        }
        function renderTable(rows) {
            const tbody = document.querySelector('#linksTable tbody');
            tbody.innerHTML = '';
            // Collect distinct folder names
            const folderNames = Array.from(new Set(rows.map(r => r.name).filter(Boolean)));
            rows.forEach((row, idx) => {
                const tr = document.createElement('tr');
                // Folder Name as datalist-enabled input
                const folderNameOptions = folderNames.map(name => `<option value="${name}"></option>`).join('');
                tr.innerHTML = `
                <td><input class="form-control" list="folderNameList" value="${row.name || ''}" data-field="name" data-idx="${idx}" autocomplete="off" /></td>
                <td><input class="form-control" value="${row.icon || ''}" data-field="icon" data-idx="${idx}" /></td>
                <td><input class="form-control" value="${row.title || ''}" data-field="title" data-idx="${idx}" /></td>
                <td><input class="form-control" value="${row.url || ''}" data-field="url" data-idx="${idx}" /></td>
                <td><input class="form-control" value="${row.linkIcon || ''}" data-field="linkIcon" data-idx="${idx}" /></td>
                <td><input class="form-control" value="${row.statusUrl || ''}" data-field="statusUrl" data-idx="${idx}" /></td>
                <td><input class="form-control" value="${row.matchPhrase || ''}" data-field="matchPhrase" data-idx="${idx}" /></td>
                <td class="d-flex gap-1 justify-content-center align-items-center p-1">
                    <button class="btn btn-primary btn-sm save-btn" onclick="saveRow(${idx})" id="saveBtn${idx}" title="Save"><i class="fa-solid fa-floppy-disk"></i></button>
                    <button class="btn btn-danger btn-sm" onclick="deleteRow(${idx})" title="Delete"><i class="fa-solid fa-trash"></i></button>
                </td>
            `;
                tbody.appendChild(tr);
                // Add datalist for folder names only once
                if (!document.getElementById('folderNameList')) {
                    const datalist = document.createElement('datalist');
                    datalist.id = 'folderNameList';
                    datalist.innerHTML = folderNameOptions;
                    document.body.appendChild(datalist);
                }
                // Add change detection for inputs in this row
                const inputs = tr.querySelectorAll('input');
                const saveBtn = tr.querySelector('.save-btn');
                inputs.forEach(input => {
                    input.addEventListener('input', () => {
                        saveBtn.classList.remove('btn-primary');
                        saveBtn.classList.add('btn-success');
                    });
                });
            });
        }
        function showAddRow() {
            const tbody = document.querySelector('#linksTable tbody');
            const idx = tbody.children.length;
            const tr = document.createElement('tr');
            tr.innerHTML = `
            <td><input class="form-control" data-field="name" data-idx="${idx}" list="folderNameList" autocomplete="off" /></td>
            <td><input class="form-control" data-field="icon" data-idx="${idx}" /></td>
            <td><input class="form-control" data-field="title" data-idx="${idx}" /></td>
            <td><input class="form-control" data-field="url" data-idx="${idx}" /></td>
            <td><input class="form-control" data-field="linkIcon" data-idx="${idx}" /></td>
            <td><input class="form-control" data-field="statusUrl" data-idx="${idx}" /></td>
            <td><input class="form-control" data-field="matchPhrase" data-idx="${idx}" /></td>
            <td class="d-flex gap-1 justify-content-center align-items-center p-1">
                <button class="btn btn-success btn-sm" onclick="addRow(this)" title="Add"><i class="fa-solid fa-plus"></i></button>
                <button class="btn btn-secondary btn-sm" onclick="this.closest('tr').remove()" title="Cancel"><i class="fa-solid fa-xmark"></i></button>
            </td>
        `;
            tbody.appendChild(tr);
            // Auto-populate icon when folder name is entered
            const nameInput = tr.querySelector('input[data-field="name"]');
            const iconInput = tr.querySelector('input[data-field="icon"]');
            nameInput.addEventListener('input', function () {
                // Find first matching row.name in the table and set icon
                const allRows = Array.from(document.querySelectorAll('#linksTable tbody tr'));
                let foundIcon = '';
                for (const rowEl of allRows) {
                    const n = rowEl.querySelector('input[data-field="name"]');
                    const i = rowEl.querySelector('input[data-field="icon"]');
                    if (n && i && n.value.trim() && n !== nameInput && n.value.trim() === nameInput.value.trim()) {
                        foundIcon = i.value;
                        break;
                    }
                }
                if (foundIcon) iconInput.value = foundIcon;
            });
        }
        function addRow(btn) {
            const tr = btn.closest('tr');
            const inputs = tr.querySelectorAll('input');
            const row = {};
            inputs.forEach(input => row[input.dataset.field] = input.value);
            showSpinner(true);
            fetch('./api/ControlPanelLinks', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(row)
            }).then(() => {
                showToast('Link added');
                fetchLinks();
            }).finally(() => showSpinner(false));
        }
        function saveRow(idx) {
            const inputs = document.querySelectorAll(`input[data-idx='${idx}']`);
            const row = {};
            inputs.forEach(input => row[input.dataset.field] = input.value);
            showSpinner(true);
            fetch(`./api/ControlPanelLinks/${idx}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(row)
            }).then(() => {
                showToast('Link updated');
                fetchLinks();
            }).finally(() => showSpinner(false));
        }
        function deleteRow(idx) {
            if (!confirm('Delete this link?')) return;
            showSpinner(true);
            fetch(`./api/ControlPanelLinks/${idx}`, { method: 'DELETE' })
                .then(() => {
                    showToast('Link deleted');
                    fetchLinks();
                })
                .finally(() => showSpinner(false));
        }
        document.addEventListener('DOMContentLoaded', fetchLinks);
    </script>
}
